<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML">
  <title>Blurred Image Generation</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m58589</md:content-id>
  <md:title>Blurred Image Generation</md:title>
  <md:abstract/>
  <md:uuid>179ae2bd-ceed-4282-aaaa-4fc956482382</md:uuid>
</metadata>

<content>
    <para id="id331945">
      <emphasis effect="bold">Blurred Image Generation</emphasis>
    </para>
    <para id="id331955">We use linear convolution to simulate our test image. For coded
blurring, we convolve our test picture with a 52-length coded pulse
train <m:math overflow="scroll"><m:mrow><m:mo>[</m:mo><m:mn>10100001110</m:mn><m:mo>...</m:mo><m:mo>.</m:mo><m:mo>]</m:mo></m:mrow></m:math>, which generates an image
resembling one that is taken by a camera with a fluttered shutter. For
uncoded blurring, we convolve our test picture with a 52-length boxcar
signal, which results in the effect of linear, one-dimensional blur of
the entire image. Gaussian white noise is added to the blurred image to
mimic the readout noise produced by camera sensors in the real world.</para>
    <para id="id331980">The convolution is done by superpositioning the frames according to the
code sequence. This hardcoding approach exactly models the generation of
one-dimensional motion blurred images by a real camera. For each value
<m:math overflow="scroll"><m:msub><m:mi>a</m:mi><m:mi>j</m:mi></m:msub></m:math> in the code sequence, regardless of 0 or 1, we shift the
corresponding frame down by <m:math overflow="scroll"><m:mi>j</m:mi></m:math> elements. If <m:math overflow="scroll"><m:mrow><m:msub><m:mi>a</m:mi><m:mi>j</m:mi></m:msub><m:mo>=</m:mo><m:mn>1</m:mn></m:mrow></m:math>, we add the
corresponding frame to the final blurred image. If <m:math overflow="scroll"><m:mrow><m:msub><m:mi>a</m:mi><m:mi>j</m:mi></m:msub><m:mo>=</m:mo><m:mn>0</m:mn></m:mrow></m:math>, then
we ignore the corresponding frame.</para>
    <list id="id332383" display="block" list-type="enumerated">
      <item id="uid1">
Begin with the original image as the base frame.
</item>
      <item id="uid2">
Look at the code sequence. If the <m:math overflow="scroll"><m:mi>j</m:mi></m:math>-th value in the sequence is a
`1', then produce another frame that is the base frame shifted
downwards by j elements.
</item>
      <item id="uid3">
If k is the number of `1's in the sequence, then we should have k
total shifted frames, including the base frame, after the code
sequence is entirely processed.
</item>
      <item id="uid4">
We superposition all the shifted frames together to generate the
blurred image.
</item>
      <item id="uid5">
We scale the image by k to set pixel values back to the valid interval
[0, 1] to avoid over-exposure.
</item>
      <item id="uid6">
We add independent and identically distributed zero-mean Gaussian
white noise to each element of the blurred image. The variance of this
noise will be our independent/manipulated variable, which
characterizes the noise power.
</item>
      <item id="uid7">
We repeat the generation of noisy blurred image for different
variances of Gaussian noise.
</item>
    </list><para id="eip-197"><title>Boxcar-blur Image</title><media id="uncoded_0" alt="uncoded blur image">
	   
  <image mime-type="image/png" src="../../media/uncoded_0_small.png"/>
		 
</media></para><para id="eip-849"><title>Coded-blur Image</title><media id="coded_0" alt="coded blur image">
	   
  <image mime-type="image/png" src="../../media/coded_0_small.png"/>
		 
</media></para></content>
</document>